	package shapes;

import java.io.IOException;
import java.security.InvalidParameterException;
import java.io.FileReader;
import java.io.BufferedReader;



public class Main {
	
	public static void main(String[] args) {
		int count = 0;
		String s;
		//ArrayList<Shape> shapes = new ArrayList<Shape>();
		Shape[] shapes = new Shape[100];
		
		System.out.println("------->JAC 444 Assignment 1<-------");
		System.out.println("------->Task 2 ... <-------");
		
		
		try (BufferedReader br = new BufferedReader(new FileReader("shapes.txt"))) {
			while ((s = br.readLine()) != null) {
			String[] tokens = s.split(",");
			//your code
			
					if (tokens[0].equals("Circle") && tokens.length == 2) {
						double cirParam = Double.parseDouble(tokens[1]);
						
						if (cirParam > 0) {
							Circle cirObj = new Circle();

							cirObj.setRadius(cirParam);
							
							shapes[count++] = cirObj;
							
							
							
							
						}
						else {
							System.out.println("Invalid radius!");
						}
						

					
					}
					else if (tokens[0].equals("Square") && tokens.length == 2) {
						double squParam = Double.parseDouble(tokens[1]);
						
						if (squParam > 0) {
							Square squObj = new Square();
							//shapes.add(squObj);
							
							
							shapes[count++] = squObj;
							
							
							
							squObj.setWidth(squParam);
						}
						else {
							System.out.println("Invalid side!");
						}
						
					}
					else if (tokens[0].equals("Rectangle") && tokens.length == 3) {
						double recParam1 = Double.parseDouble(tokens[1]);
						double recParam2 = Double.parseDouble(tokens[2]);
						
						if (recParam1 > 0 && recParam2 > 0) {
							Rectangle recObj = new Rectangle();
							//shapes.add(recObj);
							recObj.setWidth(recParam1, recParam2);
							
							
							shapes[count++] = recObj;


						}
						else {
							System.out.println("Invalid side(s)!");
						}
						
					}
					else if (tokens[0].equals("Triangle") && tokens.length == 4) {
						double triParam1 = Double.parseDouble(tokens[1]);
						double triParam2 = Double.parseDouble(tokens[2]);
						double triParam3 = Double.parseDouble(tokens[3]);
						
						if (triParam1 > 0 && triParam2 > 0 && triParam3 > 0) {
							Triangle triObj = new Triangle();
	
							try {
								triObj.validate(triParam1, triParam2, triParam3);
							} catch (InvalidParameterException e) {
								System.out.println("Invalid Parameters for Triangle!");
							}
							
							
							if (triObj.validate(triParam1, triParam2, triParam3) == true) {
								
								triObj.setWidth(triParam1, triParam2, triParam3);
								shapes[count++] = triObj;
								
								double p = triObj.perimeter();
								Area obj = (x, y, z) -> { 
									return (Math.sqrt(p * (p - triObj.getWidth1()) * 
													      (p - triObj.getWidth2()) * 
													      (p - triObj.getWidth3())));
											};
								
								System.out.println(obj.calculateArea(triParam1, triParam2, triParam3));

								
								

							}
							else {
								System.out.println("Invalid side(s)!");
							}
						}
						else {
							System.out.println("Invalid side(s)!");
						}

						
					}
					else if (tokens[0].equals("Parallelogram") && tokens.length == 3) {
						double parParam1 = Double.parseDouble(tokens[1]);
						double parParam2 = Double.parseDouble(tokens[2]);
						
						if (parParam1 > 0 && parParam2 > 0) {
							Parallelogram parObj = new Parallelogram();
							//shapes.add(parObj);
							
							shapes[count++] = parObj;
			
							
							parObj.setWidth(parParam1, parParam2);

						}
						else {
							System.out.println("Invalid side(s)!");
						}
					}
			}
		} catch (IOException e) {
			System.out.println(e.getMessage());
		}
		
		
		for (int i = 0; i < count; i++) {
			if (shapes[i] instanceof Circle) {
				if (shapes[i].perimeter() == highestPerimeter(shapes)) {
					//objectArray.remove(i);
					removeShape(shapes, i, count--);
					
				}
			}
		}
		
		for (int i = 0; i < count; i++) {
			if (shapes[i] instanceof Triangle) {
				if (shapes[i].perimeter() == lowestPerimeter(shapes)) {
					//objectArray.remove(i);
					removeShape(shapes, i, count--);

				}
			}
		}
		
		System.out.println("\n" + count + " shapes were created:");
		
		for (int i = 0; i < count; i++) {
			System.out.println(shapes[i].toString());
		}	
		
		System.out.println("Total Perimeter of Parallelogram is: " + totalPerimeter(shapes, count, Parallelogram.class));
		System.out.println("Total Perimeter of Triangle is: " + totalPerimeter(shapes, count, Triangle.class));

	}
	
	public static double lowestPerimeter(Shape[] shapes) {
		double lowestPerimeter = -1;
		
		for (int i = 0; i < shapes.length; i++) {
			
			if (shapes[i] instanceof Triangle) {
				if (lowestPerimeter < 0 || shapes[i].perimeter() < lowestPerimeter) {
					lowestPerimeter = shapes[i].perimeter();
				}
			}
		}
		
		return lowestPerimeter;
	}
	
	public static double highestPerimeter(Shape[] shapes) {
		double highestPerimeter = 0;
		
		for (int i = 0; i < shapes.length; i++) {
			if (shapes[i] instanceof Circle) {
				if (shapes[i].perimeter() > highestPerimeter) {
					highestPerimeter = shapes[i].perimeter();
				}
			}
		}
		
		return highestPerimeter;
	}
	
	
	public static void removeShape(Shape[] shapes, int index, int maxSize) {
		for (int i = index; i < maxSize - 1; i++) {
			shapes[i] = shapes[i + 1];
		}
	}
	
	public static double totalPerimeter(Shape[] shapes, int maxSize, Class<?> t) {
		double totalPerimeter = 0;
		
		for (int i = 0; i < maxSize; i++) {
			if (shapes[i].getClass() == t) {
				totalPerimeter += shapes[i].perimeter();
			}
		}
		
		return totalPerimeter;
		
	}
	

}
